{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageWin","messageLose","scoreElement","scoreAnimation","bestScoreElement","allRows","querySelectorAll","gameFiledMatrix","map","row","cell","valuesMatrix","animationNames","left","right","up","down","score","bestScore","parseInt","localStorage","getItem","randomNum","randomRow","Math","floor","random","randomCell","chanceOfFour","toFixed","value","textContent","className","startNumbFour","startNumbTwo","cellsClear","forEach","line","rowIndex","cellIndex","removeCells","handleKeyDown","keyboard","shallowCopy","classList","contains","moveLeft","moveRight","moveUp","moveDown","remove","removeEventListener","code","arrowLeftKey","rendering","findWinNum","arrowRightKey","arrowUpKey","arrowDownKey","matrix","shouldUpdateScore","shouldMergeRight","result","mutatedMatrix","mergeRow","toString","mergeRowRight","column","push","finalColumn","length","animation","setItem","matrixValue","cellValue","matrixRow","filteredArray","filter","i","addScoreAnimation","splice","fillIndex","finalArray","fill","multiply","missingZero","setTimeout","add","fieldMatrix","window","addEventListener"],"mappings":"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","file":"main.ec55243e.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst scoreElement = document.querySelector('.game-score');\nconst scoreAnimation = document.querySelector('.current-score-animation');\nconst bestScoreElement = document.querySelector('.best-score');\nconst allRows = [...document.querySelectorAll('.field-row')];\nconst gameFiledMatrix = allRows\n  .map(row => [...row.querySelectorAll('.field-cell')].map(cell => cell));\nconst valuesMatrix = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst animationNames = {\n  left: 'animation left',\n  right: 'animation right',\n  up: 'animation up',\n  down: 'animation down',\n};\nlet score = 0;\nlet bestScore = parseInt(localStorage.getItem('bestScore')) || 0;\n\nwindow.addEventListener('load', () => {\n  bestScoreElement.textContent = bestScore;\n});\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n    randomNum();\n    randomNum();\n  } else {\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    messageStart.classList.remove('hidden');\n\n    if (!messageLose.classList.contains('hidden')) {\n      messageLose.classList.add('hidden');\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    if (!messageWin.classList.contains('hidden')) {\n      messageWin.classList.add('hidden');\n      document.addEventListener('keydown', handleKeyDown);\n    }\n    cellsClear();\n  };\n});\n\nfunction randomNum() {\n  const randomRow = Math.floor(Math.random() * 4);\n  const randomCell = Math.floor(Math.random() * 4);\n  const chanceOfFour = +Math.random().toFixed(2);\n  const value = valuesMatrix[randomRow][randomCell];\n  const startNumbFour = 4;\n  const startNumbTwo = 2;\n\n  if (value === 0) {\n    if (chanceOfFour <= 0.1) {\n      valuesMatrix[randomRow][randomCell] = startNumbFour;\n      gameFiledMatrix[randomRow][randomCell].textContent = startNumbFour;\n\n      gameFiledMatrix[randomRow][randomCell]\n        .className = `field-cell field-cell--${startNumbFour} `\n        + `field-cell--animation-new-cell`;\n    } else {\n      valuesMatrix[randomRow][randomCell] = startNumbTwo;\n      gameFiledMatrix[randomRow][randomCell].textContent = startNumbTwo;\n\n      gameFiledMatrix[randomRow][randomCell]\n        .className = `field-cell field-cell--${startNumbTwo} `\n        + `field-cell--animation-new-cell`;\n    };\n  } else {\n    return randomNum();\n  };\n}\n\nfunction cellsClear() {\n  scoreElement.textContent = 0;\n  score = 0;\n\n  valuesMatrix.forEach((line, rowIndex) => line.forEach((value, cellIndex) => {\n    if (value !== 0) {\n      valuesMatrix[rowIndex][cellIndex] = 0;\n      removeCells(gameFiledMatrix[rowIndex][cellIndex]);\n    }\n  }));\n}\n\ndocument.addEventListener('keydown', handleKeyDown);\n\nfunction handleKeyDown(keyboard) {\n  const shallowCopy = valuesMatrix.map(row => row.map(cell => cell));\n  const arrowLeftKey = 'ArrowLeft';\n  const arrowRightKey = 'ArrowRight';\n  const arrowUpKey = 'ArrowUp';\n  const arrowDownKey = 'ArrowDown';\n\n  if (button.classList.contains('start')) {\n    return;\n  }\n\n  if (!moveLeft(shallowCopy)\n    && !moveRight(shallowCopy)\n    && !moveUp(shallowCopy)\n    && !moveDown(shallowCopy)) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', handleKeyDown);\n  }\n\n  switch (keyboard.code) {\n    case arrowLeftKey:\n      if (moveLeft(valuesMatrix, 'updateScore')) {\n        randomNum();\n        rendering(animationNames.left);\n        findWinNum();\n      };\n      break;\n\n    case arrowRightKey:\n      if (moveRight(valuesMatrix, 'updateScore')) {\n        randomNum();\n        rendering(animationNames.right);\n        findWinNum();\n      };\n      break;\n\n    case arrowUpKey:\n      if (moveUp(valuesMatrix, 'updateScore')) {\n        randomNum();\n        rendering(animationNames.up);\n        findWinNum();\n      };\n      break;\n\n    case arrowDownKey:\n      if (moveDown(valuesMatrix, 'updateScore')) {\n        randomNum();\n        rendering(animationNames.down);\n        findWinNum();\n      };\n      break;\n  }\n};\n\nfunction moveLeft(matrix, shouldUpdateScore, shouldMergeRight) {\n  let result = false;\n\n  const mutatedMatrix = matrix\n    .map(row => mergeRow(row, shouldUpdateScore, shouldMergeRight));\n\n  matrix.forEach((row, rowIndex) => {\n    if (row.toString() !== mutatedMatrix[rowIndex].toString()) {\n      result = true;\n      matrix[rowIndex] = mutatedMatrix[rowIndex];\n    }\n  });\n\n  return result;\n}\n\nfunction moveRight(matrix, shouldUpdateScore) {\n  let result = false;\n\n  const mutatedMatrix = matrix\n    .map(row => mergeRowRight(row, shouldUpdateScore));\n\n  matrix.forEach((row, rowIndex) => {\n    if (row.toString() !== mutatedMatrix[rowIndex].toString()) {\n      result = true;\n      matrix[rowIndex] = mutatedMatrix[rowIndex];\n    }\n  });\n\n  return result;\n}\n\nfunction moveUp(matrix, shouldUpdateScore, shouldMergeRight) {\n  let result = false;\n\n  for (let cell = 0; cell < 4; cell++) {\n    const column = [];\n\n    for (let row = 0; row < 4; row++) {\n      column.push(matrix[row][cell]);\n    }\n\n    const finalColumn = mergeRow(column, shouldUpdateScore, shouldMergeRight);\n\n    for (let row = 0; row < 4; row++) {\n      if (matrix[row][cell] !== finalColumn[row]) {\n        matrix[row][cell] = finalColumn[row];\n        result = true;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction moveDown(matrix, shouldUpdateScore, shouldMergeRight) {\n  let result = false;\n\n  for (let cell = 0; cell < 4; cell++) {\n    const column = [];\n\n    for (let row = 3; row >= 0; row--) {\n      column.push(matrix[row][cell]);\n    }\n\n    const finalColumn = mergeRow(column, shouldUpdateScore, shouldMergeRight);\n\n    for (let row = 3; row >= 0; row--) {\n      if (matrix[row][cell] !== finalColumn[finalColumn.length - 1 - row]) {\n        matrix[row][cell] = finalColumn[finalColumn.length - 1 - row];\n        result = true;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction rendering(animation) {\n  if (score > bestScore) {\n    bestScore = score;\n    bestScoreElement.textContent = bestScore;\n    localStorage.setItem('bestScore', bestScore);\n  }\n\n  scoreElement.textContent = score;\n\n  for (let row = 0; row < 4; row++) {\n    for (let cell = 0; cell < 4; cell++) {\n      const matrixValue = valuesMatrix[row][cell];\n      const cellValue = gameFiledMatrix[row][cell].textContent;\n\n      if (!matrixValue && cellValue) {\n        removeCells(gameFiledMatrix[row][cell]);\n        continue;\n      }\n\n      if (matrixValue !== +cellValue) {\n        gameFiledMatrix[row][cell].textContent = matrixValue;\n\n        switch (animation) {\n          case animationNames.right:\n            gameFiledMatrix[row][cell]\n              .className = `field-cell field-cell--${matrixValue} `\n              + `field-cell--animation-right`;\n            break;\n\n          case animationNames.left:\n            gameFiledMatrix[row][cell]\n              .className = `field-cell field-cell--${matrixValue} `\n              + `field-cell--animation-left`;\n            break;\n\n          case animationNames.up:\n            gameFiledMatrix[row][cell]\n              .className = `field-cell field-cell--${matrixValue} `\n              + `field-cell--animation-up`;\n            break;\n\n          case animationNames.down:\n            gameFiledMatrix[row][cell]\n              .className = `field-cell field-cell--${matrixValue} `\n              + `field-cell--animation-down`;\n        }\n      }\n    }\n  }\n}\n\nfunction findWinNum() {\n  valuesMatrix.forEach(row => row.forEach(cell => {\n    if (cell === 2048) {\n      messageWin.classList.remove('hidden');\n      document.removeEventListener('keydown', handleKeyDown);\n    }\n  }));\n}\n\nfunction mergeRow(matrixRow, shouldUpdateScore) {\n  const filteredArray = matrixRow.filter(cell => cell !== 0);\n\n  if (filteredArray.length === 0) {\n    return matrixRow;\n  }\n\n  if (filteredArray.length > 1) {\n    for (let i = 0; i < filteredArray.length; i++) {\n      if (filteredArray[i] === filteredArray[i + 1]) {\n        filteredArray[i] *= 2;\n\n        if (shouldUpdateScore === 'updateScore') {\n          score += filteredArray[i];\n          addScoreAnimation(filteredArray[i]);\n        }\n        filteredArray.splice(i + 1, 1);\n      }\n    }\n  }\n\n  const fillIndex = filteredArray.length;\n\n  filteredArray.length = matrixRow.length;\n\n  const finalArray = filteredArray.fill(0, fillIndex);\n\n  return finalArray;\n}\n\nfunction mergeRowRight(matrixRow, shouldUpdateScore) {\n  const filteredArray = matrixRow.filter(cell => cell !== 0);\n  let multiply = 0;\n\n  if (filteredArray.length === 0) {\n    return matrixRow;\n  }\n\n  if (filteredArray.length > 1) {\n    for (let i = filteredArray.length - 1; i >= 0; i--) {\n      if (filteredArray[i] === filteredArray[i - 1]\n        && filteredArray[i] !== multiply) {\n        filteredArray[i] *= 2;\n        multiply = filteredArray[i];\n\n        if (shouldUpdateScore === 'updateScore') {\n          score += filteredArray[i];\n          addScoreAnimation(filteredArray[i]);\n        }\n        filteredArray.splice(i - 1, 1);\n      }\n    }\n  }\n\n  const missingZero = [];\n\n  missingZero.length = matrixRow.length - filteredArray.length;\n  missingZero.fill(0);\n\n  return [...missingZero, ...filteredArray];\n}\n\nfunction addScoreAnimation(value) {\n  scoreAnimation.textContent = `+${value}`;\n  scoreAnimation.classList.remove('hidden');\n\n  setTimeout(() => {\n    scoreAnimation.classList.add('hidden');\n  }, 500);\n}\n\nfunction removeCells(fieldMatrix) {\n  fieldMatrix.classList\n    .add('field-cell--animation-remove-cell-in');\n\n  setTimeout(() => {\n    fieldMatrix.textContent = '';\n\n    fieldMatrix\n      .className = `field-cell field-cell--animation-remove-cell-out`;\n  }, 400);\n}\n"]}